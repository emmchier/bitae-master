@import '../base/dimens';
@import '../base/theme';
@import '../base/variables';
@import '../utilities/media-queries';
@import '../utilities/mixins';

// custom base style - btn medium
.customBtn {
  -webkit-transition: background-color .2s;
  transition: background-color .2s;
  width: auto;
  height: auto;
  display: inline-block;
  border-radius: $btn_border_radius;
  background-color: $primaryColor; 
  color: $secondaryColor;
  padding: $btn_padding;
  font-size: $btn_text_size_medium;
  position: relative;
  overflow: hidden;
  text-align: center;
  cursor: pointer;
  vertical-align: middle;

  .btnIcon {
    font-size: $base_icon_size;
    transform: translateY(4px);
    margin: 0 !important;

    &.ml-10 {
      padding-left: 10px;
    }

    &.mr-10 {
      padding-right: 10px;
    }
  }
  
}

// buttons disable states
.customBtn__outlined.disabled {
    background-color: transparent;
    border: 1px solid $disableColor;
}

.customBtn__text.disabled {
    background-color: transparent;
}

.customBtn--fullRounded {
  border-radius: $base_border_radius;
}

// button mixins

@mixin setSize($paddingY, $paddingX, $size) {
  padding: $paddingY $paddingX;
  font-size: $size;
}
  
@mixin setSizeText($size) {
  font-size: $size;
}
  
@mixin setSizeFab($widthFab, $heightFab, $paddingFab, $size) {
  width: $widthFab;
  height: $heightFab;
  padding: $paddingFab;
  font-size: $size;
}
  
@mixin setProps($background, $border, $textColor, $textDecoration) {
  background-color: $background; 
  border: $border;
  color: $textColor;
  text-decoration: $textDecoration;
}

// button props by type

@mixin buttonProps($buttonType) {
  @if $buttonType == 'contained' {
    @include setProps($secondaryColor, none, $whiteColor, none);
    &:hover {
      @include setProps($secondaryDarkColor, none, $whiteColor, none);
    }
    &:focus {
      @include setProps($secondaryLightColor, none, $whiteColor, none);
    }
  } @else if $buttonType == 'outlined' {
    @include setProps(transparent, 1px solid $secondaryColor, $secondaryColor, none);
    &:hover {
      @include setProps($secondaryColor, 1px solid $secondaryColor, $whiteColor, none);
    }
    &:focus {
      @include setProps($secondaryDarkColor, 1px solid $secondaryColor, $whiteColor, none);
    }
  } @else if $buttonType == 'text' {
    @include setProps(transparent, none, $primaryTextColor, none);
    &:hover {
      @include setProps(transparent, none, $secondaryDarkColor, underline);
    }
    &:focus {
      @include setProps(transparent, none, $secondaryLightColor, none);
    }
  } @else if $buttonType == 'fab' {
    @extend %fabProps;
    @include getShadow();
    &:hover {
      @include setProps($secondaryDarkColor, none, $whiteColor, none);
    }
  } @else {
    @include setProps($secondaryColor, none, $whiteColor, none);
    &:hover {
      @include setProps($secondaryDarkColor, none, $whiteColor, none);
    }
    &:focus {
      @include setProps($secondaryLightColor, none, $whiteColor, none);
    }
    @error "Unknown type button #{$buttonType}.";
  }
}

// buttons sizes - general
@mixin buttonSize($buttonSize) {
  @if $buttonSize == 'small' {
    @include setSize($btn_padding_y / 2, $btn_padding_x / 2, $btn_text_size_small);
  } @else if $buttonSize == 'medium' {
    @include setSize($btn_padding_y, $btn_padding_x, $btn_text_size_medium);
  } @else if $buttonSize == 'large' {
    @include setSize($btn_padding_y * 1.2, $btn_padding_x * 1.4, $btn_text_size_large);
  } @else {
    @include setSize($btn_padding_y, $btn_padding_x, $btn_text_size_medium);
    @error "Unknown size button #{$buttonSize}.";
  }
}

// button text own props
@mixin buttonSizeText($buttonSize) {
  @if $buttonSize == 'small' {
    @include setSizeText($btn_text_size_small / 1);
  } @else if $buttonSize == 'medium' {
    @include setSizeText($btn_text_size_medium);
  } @else if $buttonSize == 'large' {
    @include setSizeText($btn_text_size_large * 1.3);
  } @else {
    @include setSize($btn_text_size_medium);
    @error "Unknown size button #{$buttonSize}.";
  }
}

// button fab own props
@mixin buttonSizeFab($buttonSize) {
  @if $buttonSize == 'small' {
      @include setSizeFab(
        $btn_width_fab / 1.3, 
        $btn_height_fab / 1.3, 
        $btn_padding_fab / 1.3, 
        $btn_text_size_small);
  } @else if $buttonSize == 'medium' {
    @include setSizeFab(
      $btn_width_fab, 
      $btn_height_fab, 
      $btn_padding_fab, 
      $btn_text_size_medium);
  } @else if $buttonSize == 'large' {
    @include setSizeFab(
      $btn_width_fab * 1.4, 
      $btn_height_fab * 1.4, 
      $btn_padding_fab * 1.4, 
      $btn_text_size_large);
  } @else {
    @include setSizeFab(
      $btn_width_fab, 
      $btn_height_fab, 
      $btn_padding_fab, 
      $btn_text_size_medium);
      @error "Unknown size button #{$buttonSize}.";
  }
}

// generate buttons
@each $type in $btn_types {
  .customBtn__#{$type} {
    @include buttonProps($type);
  }
  @each $size in $btn_type_sizes {
    .customBtn__#{$type}--#{$size} {
      @if $type == 'text'  {
        @include buttonSizeText($size);
      } @else if $type == 'fab' {
        @include buttonSizeFab($size);
      } @else {
        @include buttonSize($size);
      }
    }
  }
}

// Extends

%fabProps {
  width: $btn_width_fab;
  height: $btn_height_fab;
  border-radius: $btn_border_radius_fab;
  background-color: $primaryColor;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

// Media Queries

@media #{$mobile} {

  .customBtn__contained,
  .customBtn__fab {
    &:hover {
        background-color: $primaryColor;
        color: $whiteColor;
    }
  }

  .customBtn__fab {
    &:hover {
        i {
          color: $whiteColor;
        }
    }
  }

  .customBtn__outlined {
    &:hover {
      background-color: transparent;
      color: $secondaryColor;
      border: 1px solid $secondaryColor;
    }
  }

  .customBtn__text {
    &:hover {
      background-color: transparent;
      color: $primaryTextColor;
      text-decoration: none;
    }
  }
}